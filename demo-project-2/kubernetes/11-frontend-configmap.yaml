# demo-project-2/kubernetes/11-frontend-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chatbot-frontend-html # Name of the ConfigMap
  namespace: demo-project-2-ns
data:
  index.html: | # The key 'index.html' will be the filename when mounted
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Kubernetes Chatbot Demo</title>
        <style>
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background-color: #f4f7f6; display: flex; justify-content: center; align-items: center; min-height: 100vh; }
            .chat-container {
                background-color: #ffffff;
                border-radius: 10px;
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                width: 90%;
                max-width: 600px;
                overflow: hidden;
                display: flex;
                flex-direction: column;
                min-height: 400px;
                max-height: 80vh;
            }
            .chat-header {
                background-color: #4CAF50;
                color: white;
                padding: 15px;
                font-size: 1.2em;
                text-align: center;
                border-bottom: 1px solid #ddd;
            }
            .chat-messages {
                flex-grow: 1;
                padding: 20px;
                overflow-y: auto;
                display: flex;
                flex-direction: column;
            }
            .message {
                margin-bottom: 15px;
                padding: 10px 15px;
                border-radius: 8px;
                max-width: 80%;
                word-wrap: break-word;
                line-height: 1.5;
            }
            .user-message {
                align-self: flex-end;
                background-color: #DCF8C6;
                color: #333;
                margin-left: auto;
            }
            .bot-message {
                align-self: flex-start;
                background-color: #E8E8E8;
                color: #333;
                margin-right: auto;
            }
            .chat-input-area {
                display: flex;
                padding: 15px;
                border-top: 1px solid #eee;
            }
            .chat-input-area input[type="text"] {
                flex-grow: 1;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 5px;
                margin-right: 10px;
                font-size: 1em;
            }
            .chat-input-area button {
                background-color: #007BFF;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px 15px;
                cursor: pointer;
                font-size: 1em;
                transition: background-color 0.2s;
            }
            .chat-input-area button:hover {
                background-color: #0056b3;
            }
        </style>
    </head>
    <body>
        <div class="chat-container">
            <div class="chat-header">Kubernetes Chatbot</div>
            <div class="chat-messages" id="chatMessages">
                <div class="message bot-message">Hello! Type a message to chat.</div>
            </div>
            <div class="chat-input-area">
                <input type="text" id="messageInput" placeholder="Type your message..." onkeypress="handleKeyPress(event)">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>

        <script>
            const chatMessages = document.getElementById('chatMessages');
            const messageInput = document.getElementById('messageInput');
            const CHAT_API_PATH = '/api/chat'; // Ingress will route this to backend

            function addMessage(text, sender) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                messageDiv.classList.add(sender === 'user' ? 'user-message' : 'bot-message');
                messageDiv.textContent = text;
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight; // Scroll to bottom
            }

            async function sendMessage() {
                const message = messageInput.value.trim();
                if (message === '') return;

                addMessage(message, 'user');
                messageInput.value = '';

                addMessage('Thinking...', 'bot'); // Show thinking message

                try {
                    const response = await fetch(CHAT_API_PATH, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ message: message })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                    // Remove "Thinking..." message before adding actual response
                    chatMessages.removeChild(chatMessages.lastChild); 
                    addMessage(data.response, 'bot');

                } catch (error) {
                    console.error('Error sending message:', error);
                    chatMessages.removeChild(chatMessages.lastChild); // Remove thinking message
                    addMessage(`Error: Could not connect to chatbot. (${error.message})`, 'bot');
                }
            }

            function handleKeyPress(event) {
                if (event.key === 'Enter') {
                    sendMessage();
                }
            }
        </script>
    </body>
    </html>